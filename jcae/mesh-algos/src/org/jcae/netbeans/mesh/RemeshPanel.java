/*
 * Project Info:  http://jcae.sourceforge.net
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.
 *
 * (C) Copyright 2005-2009, by EADS France
 */


package org.jcae.netbeans.mesh;

import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.io.PrintStream;
import javax.swing.BorderFactory;
import javax.swing.JCheckBox;
import javax.swing.JDialog;
import javax.swing.JFormattedTextField;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import org.jcae.netbeans.DoubleFormatter;
import org.openide.util.NbBundle;

/**
 *
 * @author Jerome Robert
 */
public class RemeshPanel extends JPanel {

    /** Creates new form RemeshPanel */
    public RemeshPanel() {
        initComponents();
		coplField.setFormatterFactory(DoubleFormatter.FACTORY);
		sizeField.setFormatterFactory(DoubleFormatter.FACTORY);
		coplField.setValue(0.9);
		sizeField.setValue(100.0);
    }

	public double getCoplanarity()
	{
		return (Double) coplField.getValue();
	}

	public void setTargetSize(double d)
	{
		sizeField.setValue(d);
	}
	
	public double getTargetSize()
	{
		return (Double) sizeField.getValue();
	}

	public boolean isFeatureOnly()
	{
		return featureCheckbox.isSelected();
	}
	
	public boolean showDialog()
	{
        JOptionPane jp = new JOptionPane(this,
             JOptionPane.PLAIN_MESSAGE, JOptionPane.OK_CANCEL_OPTION);
		JDialog d = jp.createDialog("Remesh options");
		d.setResizable(true);
		d.setVisible(true);
        return Integer.valueOf(JOptionPane.OK_OPTION).equals(jp.getValue());
	}
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
		GridBagConstraints gridBagConstraints;
		JLabel sizeLabel = new JLabel();
		JLabel coplLabel = new JLabel();
        sizeField = new JFormattedTextField();
        coplField = new JFormattedTextField();
        featureCheckbox = new JCheckBox();
        tablePanel = createTable();

        setLayout(new GridBagLayout());

        sizeLabel.setText("Target edge size");
        add(sizeLabel, new GridBagConstraints());

        coplLabel.setText("Coplanarity");
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = GridBagConstraints.WEST;
        add(coplLabel, gridBagConstraints);

        sizeField.setColumns(9);
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new Insets(5, 5, 5, 5);
        add(sizeField, gridBagConstraints);
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new Insets(5, 5, 5, 5);
        add(coplField, gridBagConstraints);

        featureCheckbox.setText(NbBundle.getMessage(RemeshPanel.class, "RemeshPanel.featureCheckbox.text")); // NOI18N
        featureCheckbox.setToolTipText(NbBundle.getMessage(RemeshPanel.class, "RemeshPanel.featureCheckbox.toolTipText")); // NOI18N
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = GridBagConstraints.REMAINDER;
        add(featureCheckbox, gridBagConstraints);

        tablePanel.setBorder(BorderFactory.createTitledBorder(NbBundle.getMessage(RemeshPanel.class, "RemeshPanel.tablePanel.border.title"))); // NOI18N
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridwidth = GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new Insets(5, 0, 0, 0);
        add(tablePanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JFormattedTextField coplField;
    private JCheckBox featureCheckbox;
    private JFormattedTextField sizeField;
    private JPanel tablePanel;
    // End of variables declaration//GEN-END:variables

	private JPanel createTable() {
		return new PointMetricPanel() {
			@Override
			protected double getDefaultSize() {
				return (Double)sizeField.getValue();
			}
		};
	}

	public void writePointMetric(PrintStream out)
	{
		((PointMetricPanel)tablePanel).writeTable(out);
	}

	public boolean isPointMetric()
	{
		return !((PointMetricPanel)tablePanel).isEmpty();
	}
}
